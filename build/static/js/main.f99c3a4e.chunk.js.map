{"version":3,"sources":["Webtoon.js","Layout/NavBar.js","Cofing.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Webtoon","test","navigator","userAgent","prefixHref","_this$props","this","props","name","img","href","provider","isMobile","link","react_default","a","createElement","className","target","src","alt","Component","NavBar","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","_useState3","_useState4","cSelected","setCSelected","Navbar","color","light","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","Button","value","e","action","active","includes","selected","index","indexOf","push","splice","toConsumableArray","onCheckboxBtnClick","Form","inline","FormGroup","Input","type","id","placeholder","Config","host","Main","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","changeTab","data","setState","prevState","tab","state","undefined","searchData","_this2","document","title","concat","fetch","then","res","json","date","Date","getDay","weekArr","Layout_NavBar","map","object","i","column","src_Webtoon","toon_name","toon_provider","day","serialize_day","toon_imgsrc","toon_href","key","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"sPA4BeA,4LAxBP,MAAO,iEAAiEC,KAAKC,UAAUC,4CAGlF,IAGDC,EAHCC,EAC+BC,KAAKC,MAAlCC,EADFH,EACEG,KAAMC,EADRJ,EACQI,IAAKC,EADbL,EACaK,KAAMC,EADnBN,EACmBM,SAGP,UAAbA,EACAP,EAAa,0BACM,SAAbO,IACNP,EAAaE,KAAKM,WAAa,8BAAgC,2BAGnE,IAAMC,EAAQT,EAAaM,EAE3B,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,KAAGN,KAAMG,EAAMK,OAAO,QAAOJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYE,IAAKV,EAAKW,IAAKZ,KACvEM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeT,WApBtBa,8GCmDPC,EAlDA,SAACf,GAAU,IAAAgB,EAEYC,oBAAS,GAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEfK,EAFeH,EAAA,GAEJI,EAFIJ,EAAA,GAAAK,EAKYN,mBAAS,IALrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKfE,EALeD,EAAA,GAKJE,EALIF,EAAA,GAiBtB,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,GACvBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAa3B,KAAK,IAAIO,UAAU,WAAhC,iBACAH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAeC,QAjBN,kBAAMV,GAAcD,IAiBSX,UAAU,SAChDH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUC,QAASb,EAAWc,QAAM,GAChC5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKD,QAAM,GACP5B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAS3B,UAAU,YACfH,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQV,MAAM,SAASW,MAAM,QAAQP,QAAS,SAAAQ,GAAC,OAAIxC,EAAMyC,OAAO,UAAUC,OAAQjB,EAAUkB,SAAS,IAArG,uBAEJpC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAS3B,UAAU,YACfH,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQV,MAAM,SAASW,MAAM,OAAOP,QAAS,SAAAQ,GAAC,OAAIxC,EAAMyC,OAAO,SAASC,OAAQjB,EAAUkB,SAAS,IAAnG,iBAEJpC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAS3B,UAAU,YAEfH,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQV,MAAM,SAASI,QAAS,kBAzB7B,SAACY,GACxB,IAAMC,EAAQpB,EAAUqB,QAAQF,GAC5BC,EAAQ,EACRpB,EAAUsB,KAAKH,GAEfnB,EAAUuB,OAAOH,EAAO,GAE5BnB,EAAaP,OAAA8B,EAAA,EAAA9B,CAAIM,IAkByCyB,CAAmB,IAAIR,OAAQjB,EAAUkB,SAAS,IAAxF,aAEJpC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAS3B,UAAU,IACfH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMC,QAAM,GACR7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAW3C,UAAU,wBACjBH,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,KAAK,OAAOtD,KAAK,QAAQuD,GAAG,cAAcC,YAAY,YAEjElD,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,sBCtCjBoB,EAJA,CACXC,KAAQ,qCC2FGC,cAtFb,SAAAA,IAAa,IAAAC,EAAA,OAAA1C,OAAA2C,EAAA,EAAA3C,CAAApB,KAAA6D,IACXC,EAAA1C,OAAA4C,EAAA,EAAA5C,CAAApB,KAAAoB,OAAA6C,EAAA,EAAA7C,CAAAyC,GAAAK,MAAAlE,KAASmE,aAoBXC,UAAY,SAACC,GACXP,EAAKQ,SAAS,SAACC,GAAD,MAAgB,CAC5BF,KAAME,EAAUF,KAChBG,IAAKH,MAtBPP,EAAKW,MAAQ,CACXJ,UAAMK,EACNC,gBAAYD,EACZF,IAAK,SALIV,mFASO,IAAAc,EAAA5E,KAClB6E,SAASC,MAAQ,sBACjB,IAAMlB,EAAI,GAAAmB,OAAMpB,EAAOC,KAAb,SAEVoB,MAAMpB,GAAMqB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SACzBF,KAAK,SAAAZ,GACJO,EAAKN,SAAS,CACZD,KAAMA,uCAYL,IACDA,EAASrE,KAAKyE,MAAdJ,KAEFe,EAAO,IAAIC,KAYf,GANY,KALZD,EAAOA,EAAKE,UAMVF,EAAO,EAEPA,GAAc,EAGXf,EAME,CACLA,EAAOrE,KAAKyE,MAAMJ,KAAKrE,KAAKyE,MAAMD,KAElC,IAAMe,EAAU,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE3D,OACE/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAObH,EAAAC,EAAAC,cAAC8E,EAAD,CAAQ9C,OAAQ1C,KAAKoE,YAErB5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZ4E,EAAQE,IAAI,SAAUC,EAAQC,GAC7B,IAAMC,EAASvB,EAAKqB,GAAQD,IAAI,SAACjD,EAAOM,GAAR,OAAkBtC,EAAAC,EAAAC,cAACmF,EAAD,CAAS3F,KAAMsC,EAAMsD,UAAWzF,SAAUmC,EAAMuD,cAAeC,IAAKxD,EAAMyD,cAAe9F,IAAKqC,EAAM0D,YAAa9F,KAAMoC,EAAM2D,UAAWC,IAAKtD,MAC3LnC,EAAY,kBAKhB,OAJGgF,IAAMP,IACPzE,EAAY,yBAIZH,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,EAAWyF,IAAKT,GAC9BnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe4E,EAAQI,IACrCC,OA/Bb,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,gDA/CSK,aCSJsF,mLARP,OACI7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,KACI9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAa7C,YAJnC9C,aCQE4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,MAASrC,SAASsC,eAAe,SD4H3C,kBAAmBvH,WACrBA,UAAUwH,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.f99c3a4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css'\r\nclass Webtoon extends Component {\r\n    isMobile() {\r\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    }\r\n\r\n    render() {\r\n        const {name, img, href, provider} = this.props;\r\n        \r\n        let prefixHref;\r\n        if (provider === \"NAVER\") {\r\n            prefixHref = \"https://comic.naver.com\";\r\n        } else if(provider === \"DAUM\") {\r\n            prefixHref = this.isMobile() ? \"http://m.webtoon.daum.net/m\" : \"http://webtoon.daum.net\";\r\n        }\r\n\r\n        const link =  prefixHref + href;\r\n        \r\n        return (\r\n            <div className=\"webtoon-item\">\r\n                <a href={link} target=\"_sub\"><img className=\"thumb-img\" src={img} alt={name}></img></a>\r\n                <p className=\"thumb-title\">{name}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Webtoon;","import React, { useState } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Button, Form, FormGroup, Input } from 'reactstrap';\n\nconst NavBar = (props) => {\n\n    const [collapsed, setCollapsed] = useState(true);\n\n    const toggleNavbar = () => setCollapsed(!collapsed);\n    const [cSelected, setCSelected] = useState([]);\n\n    const onCheckboxBtnClick = (selected) => {\n        const index = cSelected.indexOf(selected);\n        if (index < 0) {\n            cSelected.push(selected);\n        } else {\n            cSelected.splice(index, 1);\n        }\n        setCSelected([...cSelected]);\n    }\n\n    return (\n        <div>\n            <Navbar color=\"faded\" light>\n                <NavbarBrand href=\"/\" className=\"mr-auto\">Webtoooooooon</NavbarBrand>\n                <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n                <Collapse isOpen={!collapsed} navbar>\n                    <Nav navbar>\n                        <NavItem className=\"nav-item\">\n                            <Button color=\"danger\" value=\"NAVER\" onClick={e => props.action(\"NAVER\")} active={cSelected.includes(1)}>네이버</Button>\n                        </NavItem>\n                        <NavItem className=\"nav-item\">\n                            <Button color=\"danger\" value=\"DAUM\" onClick={e => props.action(\"DAUM\")} active={cSelected.includes(2)}>다음</Button>\n                        </NavItem>\n                        <NavItem className=\"nav-item\">\n                            {/* <NavLink href=\"/\">My Toons</NavLink> */}\n                            <Button color=\"danger\" onClick={() => onCheckboxBtnClick(3)} active={cSelected.includes(3)}>My Toons</Button>\n                        </NavItem>\n                        <NavItem className=\"\">\n                            <Form inline>\n                                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                                    <Input type=\"text\" name=\"email\" id=\"searchInput\" placeholder=\"Search\" />\n                                </FormGroup>\n                                <Button>Submit</Button>\n                            </Form>\n                        </NavItem>\n\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default NavBar;","const Config = {\n    'host': 'http://15.164.36.6/api/v1/webtoon'\n};\n\nexport default Config;","import React, {Component} from 'react';\nimport Webtoon from './Webtoon';\nimport NavBar from '../src/Layout/NavBar';\nimport Config from './Cofing';\n\nclass Main extends Component {\n  constructor(){\n    super(...arguments);\n    this.state = {\n      data: undefined,\n      searchData: undefined,\n      tab: \"NAVER\"\n    }\n  }\n\n  componentDidMount() {\n    document.title = \"MyToon | JeongminOh\";\n    const host = `${Config.host}/list`;\n\n    fetch(host).then(res => res.json())\n      .then(data => {\n        this.setState({\n          data: data\n        });\n      });\n  }\n\n  changeTab = (data) => {\n    this.setState((prevState) => ({\n      data: prevState.data,\n      tab: data\n    }))\n  };\n\n  render() {\n    let { data } = this.state;\n\n    let date = new Date();\n    date = date.getDay();\n    // const signup = document.getElementById(\"signUp\");\n    // signup.onclick => () {\n\n    // };\n    if(date === 0) {\n      date = 6;\n    } else {\n      date = date - 1;\n    }\n\n    if (!data) {\n      return (\n        <div className=\"loading-page\">\n          <h2>로딩중........</h2>\n        </div>\n      )\n    } else {\n      data = this.state.data[this.state.tab];\n\n      const weekArr = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"];\n\n      return (\n        <div className=\"main\">\n          {/* <div className=\"fixed-menu\">\n            <input data-function=\"swipe\" id=\"swipe\" type=\"checkbox\"/>\n            <label data-function=\"swipe\" htmlFor=\"swipe\">&#xf057;</label>\n            <label data-function=\"swipe\" htmlFor=\"swipe\">&#xf0c9;</label>\n            <img data-function=\"swipe\" className=\"menu-img\" src={require(\"./commons/images/menu-button.png\")} />\n          </div> */}\n          <NavBar action={this.changeTab}/>\n\n          <div className=\"webtoon-list\">\n            {weekArr.map(function (object, i) {\n              const column = data[object].map((value, index) => <Webtoon name={value.toon_name} provider={value.toon_provider} day={value.serialize_day} img={value.toon_imgsrc} href={value.toon_href} key={index} />);\n              let className = \"daliy-list side\";\n              if(i === date) {\n                className = \"daliy-list side today\";\n              }\n\n              return (\n                <div className={className} key={i}>\n                  <div className=\"date-header\">{weekArr[i]}</div>\n                  {column}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport Main from './Main';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Route exact path = \"/\" component = {Main} />\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}